
<!DOCTYPE html>

<html lang="en">
<head>
<meta charset="utf-8"/>
<meta content="width=device-width, initial-scale=1" name="viewport"/>
<title>Authorization Units Calculator — Light/Dark Toggle (Solid Title)</title>
<link href="https://img.icons8.com/ios-filled/32/calculator.png" rel="icon" type="image/png"/>

<meta content="Calculate PT/OT/ST authorization units and visits with a modern, accessible UI. Includes light/dark theme toggle. Uses solid color for title to avoid gradient rendering issues." name="description"/>
<style>
    /* ==========================================================
       THEME TOKENS
       ========================================================== */
    :root{
      /* LIGHT (default) */
      --bg: radial-gradient(1300px 900px at 10% 10%, #ffffff 0%, #fbfdff 55%, #f2f6fb 100%);
      --surface: #ffffff;
      --surface-2: #f8fafc;
      --border: rgba(0,0,0,.08);
      --border-2: rgba(0,0,0,.10);

      --text: #0f172a;  /* slate-900 */
      --muted: #475569; /* slate-600 */
      --muted-2: #64748b; /* slate-500 */

      --primary: #7c3aed;      /* violet-600 */
      --primary-500: #8b5cf6;  /* violet-500 */
      --primary-400: #a78bfa;  /* violet-400 */
      --ok: #16a34a;           /* green-600 */

      --shadow: 0 10px 20px rgba(15,23,42,.06), 0 4px 8px rgba(15,23,42,.05);
      --shadow-soft: 0 1px 3px rgba(15,23,42,.08);
      --radius: 16px;
      --glow-opacity: .20;
      --footer-bg: rgba(255,255,255,.85);
      --footer-border: rgba(0,0,0,.08);

      /* SOLID title color per theme */
      --title-color: #0b1220; /* near-slate-900 */
    }

    /* DARK palette overrides */
    :root[data-theme="dark"]{
      --bg: radial-gradient(1200px 800px at 10% 10%, #18181b 0%, #0a0a0b 48%, #000 100%);
      --surface: rgba(255,255,255,0.06);
      --surface-2: rgba(255,255,255,0.06);
      --border: rgba(255,255,255,0.12);
      --border-2: rgba(255,255,255,0.18);

      --text: #e5e7eb;         /* gray-200 */
      --muted: #9ca3af;        /* gray-400 */
      --muted-2: #cbd5e1;      /* slate-300 */

      --primary: #7c3aed;      /* violet-600 */
      --primary-500: #8b5cf6;  /* violet-500 */
      --primary-400: #a78bfa;  /* violet-400 */
      --ok: #22c55e;           /* green-500 */

      --shadow: 0 10px 30px rgba(0,0,0,.35), 0 6px 12px rgba(0,0,0,.25);
      --shadow-soft: 0 1px 3px rgba(0,0,0,.25);
      --glow-opacity: .25;
      --footer-bg: rgba(0,0,0,.35);
      --footer-border: rgba(255,255,255,.08);

      --title-color: #ffffff;  /* solid white for dark */
    }

    *{ box-sizing: border-box; }
    html, body{ height: 100%; }
    body{
      margin:0; font: 16px/1.5 system-ui, -apple-system, Segoe UI, Roboto, Helvetica, Arial, Apple Color Emoji, Segoe UI Emoji;
      color: var(--text);
      background: var(--bg);
      background-attachment: fixed;
      overflow-x: hidden;
      transition: background-color .3s ease, color .2s ease;
    }

    .wrapper{ min-height: 100dvh; display:flex; flex-direction:column; align-items:center; gap:24px; padding: 40px 16px 80px; }

    header{ width:min(1200px,100%); display:flex; align-items:center; justify-content: space-between; }

    .brand{ display:flex; align-items:center; gap:12px; }
    .logo{ width:40px; height:40px; border-radius:12px; background: linear-gradient(135deg, var(--primary-400), var(--primary)); box-shadow: inset 0 0 8px rgba(255,255,255,.35), var(--shadow); position: relative; overflow:hidden; }
    .logo::after{ content:""; position:absolute; inset:-40%; transform: rotate(35deg); background: radial-gradient(circle at 50% 50%, rgba(255,255,255,.5), transparent 60%); filter: blur(4px); animation: sheen 6s linear infinite; }
    @keyframes sheen{ 0%{ transform:translateX(-60%) rotate(35deg);} 100%{ transform:translateX(140%) rotate(35deg);} }

    /* SOLID title color (no gradient to avoid disappearing) */
    h1{
      font-size: clamp(20px, 2.6vw, 32px);
      letter-spacing:.2px; margin:0;
      color: var(--title-color);
      text-shadow: 0 1px 0 rgba(0,0,0,.03);
    }

    .container{ width: min(1200px, 100%); display:grid; gap: 20px; grid-template-columns: 1fr; }
    @media (min-width: 900px){ .container{ grid-template-columns: 1.15fr .85fr; } }

    .card{ background: var(--surface); border: 1px solid var(--border); border-radius: var(--radius); box-shadow: var(--shadow); padding: 22px; position: relative; overflow: clip; isolation: isolate; }
    .card .glow{ position:absolute; inset: -35%; z-index:-1; filter: blur(80px); opacity: var(--glow-opacity); background: radial-gradient(circle at 20% 20%, var(--primary-400), transparent 45%), radial-gradient(circle at 80% 40%, var(--primary), transparent 50%); }

    .card h2{ margin:0 0 14px; font-size: clamp(18px, 2.2vw, 24px); font-weight:800; color: inherit; }

    .row{ display:grid; grid-template-columns: 1fr; gap: 12px; }
    .mt-24{ margin-top:24px !important; }
    @media (min-width: 680px){ .row{ grid-template-columns: repeat(2, 1fr);} }

    label{ font-size: 13.5px; color: var(--muted); display:block; margin-bottom:6px; }

    .input, select{ width:100%; padding: 12px 14px; border-radius: 12px; border: 1px solid var(--border-2); background: #ffffff; color: var(--text); outline: none; transition: .2s border, .2s transform, .2s box-shadow; box-shadow: var(--shadow-soft); }
    :root[data-theme="dark"] .input, :root[data-theme="dark"] select{ background: rgba(0,0,0,.35); color: var(--text); border-color: var(--border); }
    .input:focus, select:focus{ border-color: var(--primary-500); box-shadow: 0 0 0 4px rgba(139,92,246,.25), var(--shadow-soft); transform: translateY(-1px); }
    :root[data-theme="dark"] .input:focus, :root[data-theme="dark"] select:focus{ box-shadow: 0 0 0 4px rgba(124,58,237,.25); }
    .input::placeholder{ color: var(--muted-2); }

    .controls{ display:flex; flex-wrap:wrap; gap: 10px; margin-top: 16px; }
    button{ appearance:none; border:0; cursor:pointer; padding: 12px 16px; border-radius: 12px; font-weight:700; color:#fff; background: linear-gradient(180deg, var(--primary-400), var(--primary-500) 65%, var(--primary)); box-shadow: inset 0 -1px 0 rgba(255,255,255,.35), 0 10px 18px rgba(124,58,237,.22); transition: transform .08s ease, filter .2s ease; }
    :root[data-theme="dark"] button{ box-shadow: inset 0 -1px 0 rgba(255,255,255,.35), 0 10px 20px rgba(124,58,237,.35); }
    button:hover{ filter: brightness(1.03); }
    button:active{ transform: translateY(1px); }

    .btn-ghost{ background: transparent; color: inherit; border: 1px dashed var(--border-2); box-shadow:none; }

    .results{ display:grid; grid-template-columns: repeat(3, 1fr); gap:12px; margin-top: 18px; }
    @media (max-width: 520px){ .results{ grid-template-columns: 1fr; } }

    .kpi{ padding: 14px; border-radius: 12px; border:1px solid var(--border); background: var(--surface-2); position: relative; overflow: hidden; box-shadow: var(--shadow-soft); }
    .kpi small{ display:block; color: var(--muted); margin-bottom:6px; letter-spacing:.2px; }
    .kpi .num{ font-size: clamp(22px, 3vw, 32px); font-weight: 800; letter-spacing:.4px; color: inherit; }

    .tag{ display:inline-flex; align-items:center; gap:6px; padding: 3px 8px; border-radius:999px; font-size:12px; background: rgba(139,92,246,.12); color:#5b21b6; border: 1px solid rgba(139,92,246,.35); }
    :root[data-theme="dark"] .tag{ background: rgba(124,58,237,.25); color:#ede9fe; border: 1px solid rgba(124,58,237,.5); }

    .muted{ color: var(--muted); }

    footer{ width:100%; display:flex; justify-content:center; position:sticky; bottom:0; backdrop-filter: blur(8px); background: var(--footer-bg); border-top: 1px solid var(--footer-border); }
    .footer-inner{ width:min(1100px,100%); padding:10px 16px; display:flex; justify-content: space-between; align-items:center; gap:8px; font-size:13px; color: inherit; }
    .credit{ opacity:.9; }
    .credit b{ font-weight:800; background: linear-gradient(90deg, currentColor, var(--primary-400)); -webkit-background-clip:text; background-clip:text; color:transparent; }

    /* Theme switch */
    .theme{ display:flex; align-items:center; gap:10px; color: inherit; }
    .theme .label{ font-size:13px; color: var(--muted); }
    .switch{ --w:56px; --h:28px; width: var(--w); height: var(--h); border-radius: 999px; background: #f1f5f9; border: 1px solid var(--border-2); position:relative; box-shadow: inset 0 0 6px rgba(15,23,42,.06); cursor: pointer; display:inline-flex; align-items:center; }
    :root[data-theme="dark"] .switch{ background: rgba(255,255,255,.1); border-color: var(--border); box-shadow: inset 0 0 10px rgba(0,0,0,.35); }
    .thumb{ width: 24px; height: 24px; border-radius: 50%; background: linear-gradient(180deg, #fff, #e5e7eb); position:absolute; top: 1.5px; left: 2px; transition: left .25s ease; box-shadow: 0 1px 4px rgba(15,23,42,.20); display:flex; align-items:center; justify-content:center; font-size:13px; }
    :root[data-theme="dark"] .thumb{ background: linear-gradient(180deg, #fff, #d1d5db); box-shadow: 0 2px 6px rgba(0,0,0,.35); }
    .switch.on .thumb{ left: calc(var(--w) - 26px); }
    .icon{ pointer-events:none; }

    .helper{ font-size: 12px; color: var(--muted); margin-top: 6px; }
    .errors{ margin-top: 10px; color: #b91c1c; }
    :root[data-theme="dark"] .errors{ color: #fecaca; }

    /* Visits per Week */
    .pillbar{ display:flex; gap:10px; flex-wrap:wrap; }
    .pill{ position:relative; padding:8px 14px; border-radius:999px; font-size:14px; font-weight:700; border:1px solid var(--border-2); background:#f1f5f9; color:#1f2937; cursor:pointer; user-select:none; transition: transform .08s ease, background .2s ease, border-color .2s ease, color .2s ease, box-shadow .2s ease; box-shadow: var(--shadow-soft); }
    :root[data-theme="dark"] .pill{ background: rgba(255,255,255,.07); color:#e5e7eb; border-color: var(--border); }
    .pill:hover{ background:#e2e8f0; }
    :root[data-theme="dark"] .pill:hover{ background: rgba(255,255,255,.12); }
    .pill:focus-visible{ outline:none; box-shadow: 0 0 0 3px rgba(139,92,246,.35); }
    :root[data-theme="dark"] .pill:focus-visible{ box-shadow: 0 0 0 3px rgba(124,58,237,.45); }
    .pill.active, .pill[aria-pressed="true"]{ background: linear-gradient(180deg, var(--primary-400), var(--primary-500) 65%, var(--primary)); border:2px solid rgba(124,58,237,.85); color:#fff; transform: translateY(-1px) scale(1.06); box-shadow: 0 0 0 6px rgba(139,92,246,.20), 0 10px 18px rgba(124,58,237,.24); }
    :root[data-theme="dark"] .pill.active, :root[data-theme="dark"] .pill[aria-pressed="true"]{ box-shadow: 0 0 0 6px rgba(124,58,237,.18), 0 10px 18px rgba(124,58,237,.35); }
  </style>
<style>
/* Ensure active pill buttons look identical in light and dark modes */
.pill.active {
    background-color: #a64bf4 !important; /* bright purple */
    color: white !important;
    border: 1px solid #a64bf4 !important;
}

/* Optional: hover effect for consistency */
.pill:hover {
    background-color: #a64bf4 !important;
    color: white !important;
}
</style></head>
<body>
<div class="wrapper">
<header>
<div class="brand">
<!-- <div aria-hidden="true" class="logo"></div> -->
<h1>Authorization Units Calculator</h1>
</div>
<div class="theme" title="Toggle theme">
<span class="label" id="theme-label">Light</span>
<div aria-checked="false" aria-labelledby="theme-label" class="switch" id="theme-switch" role="switch" tabindex="0"><div class="thumb"><span class="icon" id="theme-icon">☀️</span></div></div>
</div>
</header>
<div class="container" id="app">
<!-- Card 1 -->
<section aria-labelledby="calc1-title" class="card">
<div aria-hidden="true" class="glow"></div>
<div style="display:flex; align-items:center; justify-content: space-between; gap:12px; flex-wrap:wrap">
<h2 id="calc1-title">Plan-of-Care ➜ Weeks / Visits / Units</h2>
<span class="tag" title="Assumes 15-minute units">15-min units</span>
</div>
<p class="helper">Enter your POC date range, average visits per week, and duration per visit. We'll estimate weeks, total visits, and total authorized units.</p>
<div class="row" style="margin-top:10px">
<div>
<label for="start">Start Date <span class="muted">(MMDDYY)</span></label>
<input class="input date-input" id="start" inputmode="numeric" maxlength="10" placeholder="e.g., 082125"/>
</div>
<div>
<label for="end">End Date <span class="muted">(MMDDYY)</span></label>
<input class="input date-input" id="end" inputmode="numeric" maxlength="10" placeholder="e.g., 103125"/>
</div>
</div>
<div class="row mt-24">
<div>
<label for="vpw">Visits per Week <span class="muted">(1–5)</span></label>
<div aria-label="Visits per week" class="pillbar" id="vpw-pills">
<button aria-pressed="true" class="pill active" data-v="1" type="button">1</button>
<button aria-pressed="false" class="pill" data-v="2" type="button">2</button>
<button aria-pressed="false" class="pill" data-v="3" type="button">3</button>
<button aria-pressed="false" class="pill" data-v="4" type="button">4</button>
<button aria-pressed="false" class="pill" data-v="5" type="button">5</button>
</div>
<input id="vpw" type="hidden" value="1"/>
</div>
<div>
<label for="dur1">Duration per Visit (minutes)</label>
<select class="input" id="dur1">
<option disabled="" selected="" value="">Select</option>
<option value="30">30</option>
<option value="45">45</option>
<option value="60">60</option>
</select>
</div>
</div>
<div class="controls">
<button id="calc1">Calculate</button>
<button class="btn-ghost" id="reset1">Reset</button>
</div>
<div aria-live="polite" class="errors" id="errors1" role="alert"></div>
<div aria-live="polite" class="results">
<div class="kpi"><small>Total weeks</small><div class="num" id="weeks">—</div></div>
<div class="kpi"><small>Total visits</small><div class="num" id="visits">—</div></div>
<div class="kpi"><small>Total units</small><div class="num" id="units">—</div></div>
</div>
</section>
<!-- Card 2 -->
<section aria-labelledby="calc2-title" class="card">
<div aria-hidden="true" class="glow"></div>
<h2 id="calc2-title">Units ➜ Visits</h2>
<p class="helper">Know your units already? Choose visit duration and we'll convert to count of visits (15-min units).</p>
<div class="row" style="margin-top:10px">
<div>
<label for="unitsIn">Number of Units</label>
<input class="input" id="unitsIn" inputmode="numeric" placeholder="e.g., 36"/>
</div>
<div>
<label for="dur2">Duration per Visit (minutes)</label>
<select class="input" id="dur2">
<option disabled="" selected="" value="">Select</option>
<option value="30">30</option>
<option value="45">45</option>
<option value="60">60</option>
</select>
</div>
</div>
<div class="controls">
<button id="calc2">Calculate</button>
<button class="btn-ghost" id="reset2">Reset</button>
</div>
<div aria-live="polite" class="errors" id="errors2" role="alert"></div>
<div aria-live="polite" class="results">
<div class="kpi"><small>Total visits</small><div class="num" id="visits2">—</div></div>
<div class="kpi"><small>Units per visit</small><div class="num" id="upv2">—</div></div>
<div class="kpi"><small>Leftover units</small><div class="num" id="left2">—</div></div>
</div>
</section>
</div>
</div>
<footer>
<div class="footer-inner">
<div class="credit">Created by <b>Luis R.</b></div>
<div class="muted">Assumes 15-minute billing units (30/45/60 min ⇒ 2/3/4 units).</div>
</div>
</footer>
<script>
    // =====================
    // MESSAGES & UTILITIES
    // =====================
    const MESSAGES = {
      invalidFormat: '{field}: please enter the date in MMDDYY format.',
      invalidMonth: '{field}: please enter a valid month (01–12).',
      feb29NonLeap: '{field}: February 29 is only valid in leap years.',
      dayOutOfRange31: '{field}: this month does not have 31 days.',
      invalidDayGeneric: '{field}: please enter a valid day for the month.',
      invalidDatesBoth: 'Please enter valid start and end dates using MMDDYY.',
      endBeforeStart: 'End date must be after start date.',
      unitsPositive: 'Enter a positive number of units.',
      vpwOutOfRange: 'Visits per week must be between 1 and 5.',
      durationRequired: 'Please select a duration per visit.'
    };

    const $$ = (sel, root=document) => Array.from(root.querySelectorAll(sel));
    const $ = (sel, root=document) => root.querySelector(sel);

    const MONTHS_30 = new Set([4,6,9,11]);
    const MONTHS_31 = new Set([1,3,5,7,8,10,12]);
    function isLeap(yyyy){ return (yyyy % 4 === 0) && (yyyy % 100 !== 0 || yyyy % 400 === 0); }
    function resolveMsg(key, field){ return (MESSAGES[key] || key).replace('{field}', field); }

    // Accepts MMDDYY or MM/DD/YY
    function validateDateMMDDYY(s, fieldLabel){
      const digits = (s || '').replace(/\D/g, '');
      if(digits.length !== 6) return { ok:false, errorKey:'invalidFormat', errorMessage: resolveMsg('invalidFormat', fieldLabel) };
      const mm = +digits.slice(0,2), dd = +digits.slice(2,4), yy = +digits.slice(4,6);
      if(mm < 1 || mm > 12) return { ok:false, errorKey:'invalidMonth', errorMessage: resolveMsg('invalidMonth', fieldLabel) };
      const yyyy = yy <= 79 ? 2000 + yy : 1900 + yy;
      if(mm === 2){
        const leap = isLeap(yyyy); const maxFeb = leap ? 29 : 28;
        if(dd === 29 && !leap) return { ok:false, errorKey:'feb29NonLeap', errorMessage: resolveMsg('feb29NonLeap', fieldLabel) };
        if(dd < 1 || dd > maxFeb) return { ok:false, errorKey:'invalidDayGeneric', errorMessage: resolveMsg('invalidDayGeneric', fieldLabel) };
      } else if(MONTHS_30.has(mm)){
        if(dd === 31) return { ok:false, errorKey:'dayOutOfRange31', errorMessage: resolveMsg('dayOutOfRange31', fieldLabel) };
        if(dd < 1 || dd > 30) return { ok:false, errorKey:'invalidDayGeneric', errorMessage: resolveMsg('invalidDayGeneric', fieldLabel) };
      } else if(MONTHS_31.has(mm)){
        if(dd < 1 || dd > 31) return { ok:false, errorKey:'invalidDayGeneric', errorMessage: resolveMsg('invalidDayGeneric', fieldLabel) };
      }
      const date = new Date(Date.UTC(yyyy, mm-1, dd));
      return { ok:true, date };
    }

    function daysBetweenUTC(a,b){ return Math.floor((b.getTime() - a.getTime()) / 86400000); }
    function unitsPerVisit(minutes){ return Math.round(minutes / 15); }

    function animateNumber(el, to){
      const now = performance.now(); const from = 0, dur = 700;
      function step(t){ const k = Math.min(1, (t - now) / dur); const v = Math.round(from + (to - from) * (1 - Math.pow(1-k, 3))); el.textContent = v.toLocaleString(); if(k < 1) requestAnimationFrame(step); }
      requestAnimationFrame(step);
    }

    // Date input auto-slashes with stable caret
    function formatMMDDYY(digits){ const d = (digits || '').slice(0,6); if(d.length <= 2) return d; if(d.length <= 4) return d.slice(0,2) + '/' + d.slice(2); return d.slice(0,2) + '/' + d.slice(2,4) + '/' + d.slice(4); }
    function countDigits(str){ return (str.match(/\d/g)||[]).length; }
    function caretFromDigitIndex(formatted, digitIndex){ if(digitIndex <= 0) return 0; let c=0; for(let i=0;i<formatted.length;i++){ if(/\d/.test(formatted[i])) c++; if(c===digitIndex) return i+1; } return formatted.length; }
    function bindDateMask(el){
      el.addEventListener('beforeinput', (e) => { el.dataset.prevDigits = (el.value||'').replace(/\D/g,''); el.dataset.prevDigitIndex = countDigits((el.value||'').slice(0, el.selectionStart||0)); el.dataset.inputType = e.inputType||''; el.dataset.inputData = e.data||''; });
      el.addEventListener('input', (e) => { const prevDigits = el.dataset.prevDigits || ''; const prevDigitIndex = +el.dataset.prevDigitIndex || 0; const inputType = el.dataset.inputType || e.inputType || ''; const inputData = el.dataset.inputData || e.data || ''; let digits = (el.value||'').replace(/\D/g,'').slice(0,6);
        let newDigitIndex = prevDigitIndex; if(inputType==='deleteContentBackward'){ newDigitIndex = Math.max(0, prevDigitIndex-1); } else if(inputType==='deleteContentForward'){ newDigitIndex = prevDigitIndex; } else if(inputType==='insertText' || inputType==='insertFromPaste'){ const added=(inputData||'').replace(/\D/g,'').length; newDigitIndex = prevDigitIndex + added; } else { const diff = digits.length - prevDigits.length; newDigitIndex = prevDigitIndex + Math.max(0,diff); }
        newDigitIndex = Math.max(0, Math.min(newDigitIndex, digits.length)); const formatted = formatMMDDYY(digits); el.value = formatted; const caretPos = caretFromDigitIndex(formatted, newDigitIndex); requestAnimationFrame(() => el.setSelectionRange(caretPos, caretPos)); });
      el.addEventListener('blur', () => { const digits = el.value.replace(/\D/g,''); if(digits.length===6) el.value = formatMMDDYY(digits); });
    }
    $$('.date-input').forEach(bindDateMask);

    // VISITS PER WEEK PILLS (with ARIA pressed)
    const vpwHidden = $('#vpw');
    const vpwButtons = $$('#vpw-pills .pill');
    vpwButtons.forEach(btn => {
      btn.addEventListener('click', () => {
        vpwButtons.forEach(b => { b.classList.remove('active'); b.setAttribute('aria-pressed','false'); });
        btn.classList.add('active'); btn.setAttribute('aria-pressed','true'); vpwHidden.value = btn.dataset.v;
      });
      btn.addEventListener('keydown', (e) => { if(e.key==='Enter' || e.key===' '){ e.preventDefault(); btn.click(); }});
    });

    // CALC 1
    $('#calc1').addEventListener('click', () => {
      const err = $('#errors1'); err.textContent = '';
      const sVal = $('#start').value.trim(); const eVal = $('#end').value.trim();
      const s = validateDateMMDDYY(sVal, 'Start date'); const e = validateDateMMDDYY(eVal, 'End date');
      if(!s.ok && !e.ok){ err.textContent = MESSAGES.invalidDatesBoth; return; }
      if(!s.ok){ err.textContent = s.errorMessage; return; }
      if(!e.ok){ err.textContent = e.errorMessage; return; }
      const vpwRaw = +($('#vpw').value || 0); const vpw = Math.max(1, Math.min(5, vpwRaw)); const dur = +($('#dur1').value);
      if(!dur){ err.textContent = MESSAGES.durationRequired; return; }
      if(vpwRaw < 1 || vpwRaw > 5){ err.textContent = MESSAGES.vpwOutOfRange; return; }
      if(e.date < s.date){ err.textContent = MESSAGES.endBeforeStart; return; }
      const diffDays = daysBetweenUTC(s.date, e.date) + 1; const weeks = Math.ceil(diffDays / 7); const visits = weeks * vpw; const upv = unitsPerVisit(dur); const units = visits * upv;
      animateNumber($('#weeks'), weeks); animateNumber($('#visits'), visits); animateNumber($('#units'), units);
    });

    $('#reset1').addEventListener('click', () => {
      $('#start').value = ''; $('#end').value = ''; $('#dur1').value = '';
      vpwButtons.forEach(b => { b.classList.toggle('active', b.dataset.v==='1'); b.setAttribute('aria-pressed', b.dataset.v==='1' ? 'true' : 'false'); });
      $('#vpw').value = '1'; $('#weeks').textContent = '—'; $('#visits').textContent = '—'; $('#units').textContent = '—'; $('#errors1').textContent = '';
    });

    // CALC 2
    $('#calc2').addEventListener('click', () => {
      const err = $('#errors2'); err.textContent = ''; const totalUnits = +($('#unitsIn').value || '').replace(/,/g,''); const dur = +($('#dur2').value);
      if(!Number.isFinite(totalUnits) || totalUnits <= 0){ err.textContent = MESSAGES.unitsPositive; return; }
      if(!dur){ err.textContent = MESSAGES.durationRequired; return; }
      const upv = unitsPerVisit(dur); const visits = Math.floor(totalUnits / upv); const left = totalUnits - (visits * upv);
      animateNumber($('#visits2'), visits); animateNumber($('#upv2'), upv); animateNumber($('#left2'), left);
    });

    $('#reset2').addEventListener('click', () => {
      $('#unitsIn').value = ''; $('#dur2').value = ''; $('#visits2').textContent = '—'; $('#upv2').textContent = '—'; $('#left2').textContent = '—'; $('#errors2').textContent = '';
    });

    // =====================
    // THEME TOGGLE (Light/Dark)
    // =====================
    const themeSwitch = document.getElementById('theme-switch');
    const themeLabel  = document.getElementById('theme-label');
    const themeIcon   = document.getElementById('theme-icon');

    function applyTheme(theme){
      document.documentElement.setAttribute('data-theme', theme);
      const isDark = theme === 'dark';
      themeSwitch.classList.toggle('on', isDark);
      themeSwitch.setAttribute('aria-checked', isDark ? 'true' : 'false');
      themeLabel.textContent = isDark ? 'Dark' : 'Light';
      themeIcon.textContent  = isDark ? '🌙' : '☀️';
      localStorage.setItem('theme', theme);
    }

    const saved = localStorage.getItem('theme');
    applyTheme(saved || 'light');

    themeSwitch.addEventListener('click', () => {
      const next = (document.documentElement.getAttribute('data-theme') === 'dark') ? 'light' : 'dark';
      applyTheme(next);
    });
    themeSwitch.addEventListener('keydown', (e) => {
      if(e.key==='Enter' || e.key===' '){ e.preventDefault(); themeSwitch.click(); }
    });
  </script>
</body>
</html>
